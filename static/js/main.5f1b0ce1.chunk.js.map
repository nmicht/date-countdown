{"version":3,"sources":["Timer/Timer.js","Countdown/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","class","number","label","Countdown","timerComponents","Object","keys","timeLeft","forEach","interval","push","App","calculateTimeLeft","difference","Date","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","useEffect","setTimeout","Fragment","role","aria-label","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAGe,SAASA,EAAMC,GAC5B,OACE,yBAAKC,MAAM,kBACRD,EAAME,OACP,8BAAOF,EAAMG,Q,MCHJ,SAASC,EAAUJ,GAChC,IAAMK,EAAkB,GAaxB,OAXAC,OAAOC,KAAKP,EAAMQ,UAAUC,SAAQ,SAACC,GAEnCL,EAAgBM,KACd,kBAAC,EAAD,CACET,OAAQF,EAAMQ,SAASE,GACvBP,MAAOO,QAOX,yBAAKT,MAAM,aACRI,GCiCQO,MAjDf,WACE,IAKMC,EAAoB,WACxB,IACIC,EADY,IAAIC,KAAK,8BACK,IAAIA,KAE9BP,EAAW,GAWf,OATIM,EAAa,IACfN,EAAW,CACTQ,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAsB,IACnDM,QAASH,KAAKC,MAAOJ,EAff,IAekC,GAAM,IAC9CO,QAASJ,KAAKC,MAAOJ,EAhBf,IAgBmC,MAItCN,GArBI,EAwBmBc,mBAAST,KAxB5B,mBAwBNL,EAxBM,KAwBIe,EAxBJ,KAgCb,OANAC,qBAAU,WACRC,YAAW,WACTF,EAAYV,OA3BJ,QAgCV,kBAAC,IAAMa,SAAP,KACE,iCAGA,8BACE,kBAAC,EAAD,CAAWlB,SAAUA,IACrB,oDAEF,gCACE,wCAAa,0BAAMmB,KAAK,MAAMC,aAAW,QAA5B,gBAAb,OAA6D,uBAAGC,KAAK,8BAAR,WAA7D,iBClCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f1b0ce1.chunk.js","sourcesContent":["import React from 'react';\nimport './Timer.css';\n\nexport default function Timer(props) {\n  return (\n    <div class=\"timerComponent\">\n      {props.number}\n      <span>{props.label}</span>\n    </div>\n  )\n}\n","import React from 'react';\nimport Timer from '../Timer/Timer';\nimport './Countdown.css';\n\nexport default function Countdown(props) {\n  const timerComponents = [];\n\n  Object.keys(props.timeLeft).forEach((interval) => {\n\n    timerComponents.push(\n      <Timer\n        number={props.timeLeft[interval]}\n        label={interval}\n      />\n    );\n\n  });\n\n  return (\n    <div class=\"countdown\">\n      {timerComponents}\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Countdown from './Countdown/Countdown'\n\nfunction App() {\n  const SEC = 1000;\n  /**\n   * Calculate the time remaining for the event\n   * @return {Time} [description]\n   */\n  const calculateTimeLeft = () => {\n    let eventDate = new Date('2020-11-30T23:25:00-05:00');\n    let difference = eventDate - +new Date();\n\n    let timeLeft = {};\n\n    if (difference > 0) {\n      timeLeft = {\n        days: Math.floor(difference / (SEC * 60 * 60 * 24)),\n        hours: Math.floor((difference / (SEC * 60 * 60)) % 24),\n        minutes: Math.floor((difference / SEC / 60) % 60),\n        seconds: Math.floor((difference / SEC) % 60)\n      }\n    }\n\n    return timeLeft;\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, SEC);\n  });\n\n  return (\n    <React.Fragment>\n      <header>\n\n      </header>\n      <main>\n        <Countdown timeLeft={timeLeft} />\n        <h1>Para volverte a ver</h1>\n      </main>\n      <footer>\n        <p>Made with <span role=\"img\" aria-label=\"love\">ðŸ’–</span> by <a href=\"https://github.com/nmicht/\">@nmicht</a> at Berlin</p>\n      </footer>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n\n/**\n * @typedef {Object} Time\n * @property {number} days - The amound of days\n * @property {number} hours - The amount of hours\n * @property {number} minutes - The amount of minutes\n * @property {number} seconds - The amount of seconds\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}